{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include "model_data.h"\
#include "tensorflow/lite/micro/all_ops_resolver.h"\
#include "tensorflow/lite/micro/micro_interpreter.h"\
#include "tensorflow/lite/schema/schema_generated.h"\
#include "tensorflow/lite/version.h"\
#include <WiFi.h>\
#include <WiFiUdp.h>\
\
const char* ssid = "ESP32-Transmitter";\
const char* password = "12345678";\
WiFiUDP udp;\
\
// Replace with scaler values from Python\
const float RSSI_MEAN = -60.0;\
const float RSSI_STD = 5.0;\
\
constexpr int tensor_arena_size = 2 * 1024;\
uint8_t tensor_arena[tensor_arena_size];\
\
const tflite::Model* model = tflite::GetModel(g_model);\
tflite::AllOpsResolver resolver;\
tflite::MicroInterpreter interpreter(model, resolver, tensor_arena, tensor_arena_size);\
TfLiteTensor* input;\
TfLiteTensor* output;\
\
void setup() \{\
  Serial.begin(115200);\
  WiFi.begin(ssid, password);\
  while (WiFi.status() != WL_CONNECTED) delay(500);\
  udp.begin(4210);\
\
  interpreter.AllocateTensors();\
  input = interpreter.input(0);\
  output = interpreter.output(0);\
\}\
\
void loop() \{\
  int packetSize = udp.parsePacket();\
  if (packetSize) \{\
    udp.read(new char[255], 255);\
    int rssi = WiFi.RSSI();\
\
    float norm_rssi = (rssi - RSSI_MEAN) / RSSI_STD;\
    input->data.f[0] = norm_rssi;\
\
    TfLiteStatus invoke_status = interpreter.Invoke();\
    if (invoke_status != kTfLiteOk) \{\
      Serial.println("Inference failed!");\
      return;\
    \}\
\
    float predicted_distance = output->data.f[0];\
    Serial.print("RSSI: ");\
    Serial.print(rssi);\
    Serial.print(" 
\f1 \uc0\u8594 
\f0  Predicted distance: ");\
    Serial.print(predicted_distance);\
    Serial.println(" m");\
  \}\
\
  delay(200);\
\}\
}